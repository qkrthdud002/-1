#include <stdio.h>
#pragma warning(disable : 4996)
#define SWAP(x,y,t) ((t)=(x), (x)=(y), (y)=(t))

int n = 10; 
int arr[10] = { 1,10,5,8,7,6,4,3,2,9 };

void quicksort(int arr[], int left, int right) {
	if (left >= right) {//정렬할 데이터 수 1의 경우
		return;
	}
	int pivot = left;//피봇을 맨 왼쪽으로 설정한 경우
	int i = left + 1;//i는 피봇 바로 오른쪽 //10
	int j = right;//j는 맨 오른쪽 //2
	int temp;
	while (i <= j) {//i가 j이하일 때까지
		while (arr[i] <= arr[pivot])//i의 값이 피봇 이하이면
			i++;
		while (arr[j] >= arr[pivot] && j > left)
		//j의 값이 피봇보다 크고, j가 left보다 큰 경우에 한하여
			j--;
		if (i > j)//i와 j가 지나가게 되었을 경우
			SWAP(arr[j], arr[pivot], temp);
		else//i가 j보다 작은 경우는 피봇과 교체하지 않음.
			SWAP(arr[i], arr[j], temp);
	}
	quicksort(arr, left, j - 1);//피봇 기준 왼쪽 영역, 피봇보다 작은 수
	quicksort(arr, j + 1, right);//피봇 기준 오른쪽 영역, 피봇보다 큰 수
}
int main() {
	quicksort(arr, 0, n - 1);//left 0, right n - 1(배열 인덱스)
	//정렬된 결과가 출력되도록 반복
	for (int i = 0; i < n; i++) {
		printf("%3d", arr[i]);
	}
	//퀵 정렬 시간복잡도 O(NlogN)
	//퀵 정렬 시간복잡도 O(N^2)인 경우
	//퀵 정렬은 정렬이 되어있을수록 속도가 느리다.
	//1 2 3 4 5 : 속도 느림(삽입정렬일 경우 속도 빠름)
	//3 4 5 1 2 : 속도 빠름
	return 0;
}
