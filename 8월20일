//call by value : 값에 의한 호출
//call by reference : 참조에 의한 호출, 포인터를 사용
//swap 함수

//#include <stdio.h>
//void swap1(int a, int b) {
//	int t = a; a = b; b = t;
//}
//void swap2(int* c, int* d) {
//	int t = *c; *c = *d; *d = t;
//}
//int main() {
//	int a = 5, b = 7;
//	printf("a=%d, b=%d\n", a, b);
//	swap1(a, b);
//	printf("a=%d, b=%d\n", a, b);
//	swap2(&a, &b);
//	printf("a=%d, b=%d\n", a, b);
//	return 0;
//}


//factorial
//0! = 1
//1! = 1
//2! = 2
//3! = 1*2*3 = 6
//4! = 1*2*3*4 = 24

//#include <stdio.h>
//
//int fac(int c) {
//	return((c == 0) ? 1 : c * fac(c - 1));
//}
//int fac1(int c) { //재귀적 용법
//	if (c == 0)
//		c = 1;
//	else
//		c = c * fac1(c - 1);
//	return c;
//}
////팩토리얼 반복적 용법 for문
//int main() {
//	//1~50팩토리얼 결과를 보여주세요.
//	for (int i = 1; i < 51; i++) {
//		printf("%d!=%d\n", i, fac1(i));
//	}
//	return 0;
//}


//파일 입출력
#pragma warning(disable : 4996)
#include <stdio.h>

int main() {
	FILE* fp = fopen("file.txt", "w"); //w는 write모드
	fprintf(fp, "%s %s %d", "I", "am", 20);
	//printf("%s %s %d\n", "I", "am", 20);
	fclose(fp);

	fopen("file.txt", "r"); //r은 read모드
	char line[100];
	fgets(line, 100, fp);
	printf("%s", line);
	return 0;
}

시간복잡도와 공간복잡도의 의미 정리하기
시간복잡도 : 알고리즘의 절대적인 실행 시간을 나타내는 것이 아닌 
알고리즘을 수행 하는데 연산들이 몇 번 이루어지는 지를 숫자로 표기한다.
여기서 연산의 종류는 산술, 대입, 비교, 이동을 말한다.
연산(Operation)의 실행 횟수는 보편적으로 그 값이 변하지 않는 상수(constant)가
아니라 입력한 데이터의 개수를 나타내는 n에 따라 변하게 된다.

예)
 Case 1 
sum < -n * n;

 Case 2 
sum < -0
    for i < -1 to n do
        sum < -sum + n;

 Case 3 
sum < -0
    for i < -1 to n do
        for j < -1 to n do
            sum < -sum + 1;

공간복잡도 : 프로그램을 실행시킨 후 완료하는 데 필요로 하는 자원 공간의 양을 말한다.
총 공간 요구 = 고정 공간 요구 + 가변 공간 요구로 나타낼 수 있으며 수식으로는 S(P) = c + Sp(n)
으로 표기한다.
여기서 고정 공간은 입력과 출력의 횟수나 크기와 관계없는 공간의 요구(코드 저장 공간, 단순 변수,
고정 크기이 구조 변수, 상수)를 말한다.
가변 공간은 해결하려는 문제의 특정 인스턴스에 의존하는 크기를 가진 구조화 변수들을 위해서
필요로 하는 공간, 함수가 순환 호출을 할 경우 요구되는 추가 공간, 동적으로 필요한 공간을 말한다.

//예1)
int factorial(int n)
{
    if (n > 1) return n * factorial(n - 1);
    else return 1;
} //공간복잡도 O(n)

//예2)
int factorial(int n)
{
    int i = 0;
    int fac = 1;
    for (i = 1; i <= n; i++)
    {
        fac = fac * i;
    }
    return fac;
} //공간복잡도 O(1)
